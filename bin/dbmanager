#!/usr/bin/env node

var path = require("path");
var pkg = require("../package.json");
var minimist = require("minimist");
var argv = minimist(process.argv.slice(2), {
  'stopEarly': false,
  'string': [
    'port'
  ],
  'boolean': [
    'help',
    'version'
  ],
  'alias': {
    'v': 'version',
    'h': 'help',
    'p': 'port'
  },
  'default': {
    'h': false,
    'v': false
  }
});

if(argv.version) {
  console.log(pkg.version);
  process.exit(0);
}

if(argv.help) {
  var help = [
    'The express-db-manager Command Line Tool!',
    '',
    'usage: dbmanager [options]',
    '',
    'options:',
    '  -v, --version      print Version',
    '  -h, --help         print help text',
    '  -p, --port <port>  set port for application',
  ];
  for(var i in help) {
    console.log(help[i]);
  }
  process.exit(0);
}

if(argv._[0] === 'precompile') {
  var spawn = require('child_process').spawn;
  var args = [path.join(__dirname, 'precompile')];
  var proc = spawn(process.execPath, args, { stdio: 'inherit' });
  
  proc.on('exit', function (code, signal) {
    process.on('exit', function(){
      if (signal) {
        process.kill(process.pid, signal);
      } else {
        process.exit(code);
      }
    });
  });
  
  // terminate children.
  process.on('SIGINT', function () {
    proc.kill('SIGINT'); // calls runner.abort()
    proc.kill('SIGTERM'); // if that didn't work, we're probably in an infinite loop, so make it die.
  });
} else {
  var app = require("..");
  if(argv.port) {
    app.set('port', argv.port);
  }
  
  app.listen(app.get('port'), function(err) {
    if(err) {
      throw err;
    } else {
      console.log("Application running on port", app.get('port'));
    }
  });
}

